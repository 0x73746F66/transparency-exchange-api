---
jsonSchemaDialect: https://spec.openapis.org/oas/3.1/dialect/base
openapi: 3.1.1
info:
  title: Transparency Exchange API
  summary: The OWASP Transparency Exchange API specification for consumers and publishers
  description: TBC
  contact:
    name: TEA Working Group
    email: tbc@somewhere.tld
    url: https://github.com/CycloneDX/transparency-exchange-api
  license:
    name: Apache 2.0
    url: https://github.com/CycloneDX/transparency-exchange-api/blob/main/LICENSE
  version: 0.0.3
servers:
  - url: http://localhost/tea/v1
    description: Local development
paths:
  /product/uuid/{uuid}:
    get:
      description: Returns the corresponding leafs for a given product UUID.
      operationId: getTeaProductByUuid
      parameters:
        # @todo
        - $ref: "#/components/parameters/tei_urn"
      responses:
        200:
          description: Requested TEA Product found and returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/product"
        400:
          $ref: "#/components/responses/400-invalid-request"
        404:
          $ref: "#/components/responses/404-object-by-id-not-found"
      tags:
        - TEA Product
  /product/{product-identifier-type}/{product-identifier}:
    get:
      description: Returns a list of TEA products. Note that multiple products may
        match.
      operationId: getTeaProductByIdentifier
      parameters:
        - $ref: "#/components/parameters/product-identifier-type"
        - $ref: "#/components/parameters/product-identifier"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-size"
      responses:
        200:
          description: Product retrieved successfully
          $ref: "#/components/responses/paginated-product"
        400:
          $ref: "#/components/responses/400-invalid-request"
        404:
          $ref: "#/components/responses/404-object-by-id-not-found"
      tags:
        - TEA Product
  /leaf/{leaf-identifier}:
    get:
      description: Get the TEA Leaf that describes the Version of a Product
      operationId: getTeaLeafById
      parameters:
        - $ref: "#/components/parameters/leaf-identifier"
      responses:
        200:
          description: Requested TEA Leaf found and returned
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/component"
        400:
          $ref: "#/components/responses/400-invalid-request"
        404:
          $ref: "#/components/responses/404-object-by-id-not-found"
      tags:
        - TEA Leaf
  /collection/{collection-identifier}:
    get:
      description: Get a TEA Collection by it's Identifier
      operationId: getTeaCollectionById
      parameters:
        - $ref: "#/components/parameters/collection-identifier"
      responses:
        200:
          description: Requested TEA Collection found and returned
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/collection"
        400:
          $ref: "#/components/responses/400-invalid-request"
        404:
          $ref: "#/components/responses/404-object-by-id-not-found"
      tags:
        - TEA Collection
webhooks: {}
components:
  schemas:
    #
    # Definitions reused in multiple domain objects
    #
    date-time:
      type: string
      description: Timestamp
      format: date-time
      pattern: "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$"
    identifier:
      type: object
      description: An identifier with a specified type
      properties:
        idType:
          "$ref": "#/components/schemas/identifier-type"
        idValue:
          type: string
    identifier-type:
      type: string
      description: Enumeration of identifiers types
      enum:
        - cpe
        - tei
        - purl
    uuid:
      type: string
      description: A UUID
      format: uuid
      pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"

    #
    # TEA Product
    #
    product:
      type: object
      description: A TEA product
      properties:
        uuid:
          "$ref": "#/components/schemas/uuid"
        name:
          type: string
          description: Product name
        identifiers:
          type: array
          description: List of identifiers for the product
          items:
            "$ref": "#/components/schemas/identifier"
        components:
          type: array
          description: List of TEA components for the product
          items:
            "$ref": "#/components/schemas/uuid"
      required:
        - uuid
        - name
        - identifiers
        - components

    #
    # TEA Component and related objects
    #
    component:
      type: object
      description: A TEA component
      properties:
        uuid:
          "$ref": "#/components/schemas/uuid"
        name:
          type: string
          description: Leaf name
        identifiers:
          type: array
          description: List of identifiers for the component
          items:
            "$ref": "#/components/schemas/identifier"
        versions:
          type: array
          description: List of released versions for the component
          items:
            "$ref": "#/components/schemas/component-version"
      required:
        - uuid
        - name
        - identifiers
        - versions
    component-version:
      type: object
      description: A specific version of a TEA leaf
      properties:
        uuid:
          "$ref": "#/components/schemas/uuid"
        version:
          type: string
          description: Version number of TEA leaf
        identifiers:
          type: array
          description: List of identifiers for this component version
          items:
            "$ref": "#/components/schemas/identifier"
        release_date:
          "$ref": "#/components/schemas/date-time"
          description: Release date
        pre_release:
          type: boolean
          description: Marks if the version is a pre-release version
        classifier:
          type: object
          description: Optional classifier to distinguish between artifacts
      required:
        - uuid
        - version
        - identifiers
        - release_date
        - pre_release

    #
    # TEA Collection and related objects
    #
    collection:
      type: object
      description: A collection of security-related documents
      properties:
        uuid:
          "$ref": "#/components/schemas/uuid"
          description: Must match the UUID of the corresponding `component_version` object
        version:
          type: integer
          default: 1
          description: Collection version, incremented each time its content changes.
        update_reason:
          "$ref": "#/components/schemas/collection-update-reason"
    collection-update-reason:
      type: object
      description: Reason for the last update to the TEA collection
      properties:
        type:
          "$ref": "#/components/schemas/collection-update-reason-type"
        comment:
          type: string
          description: Free text description
    collection-update-reason-type:
      type: string
      description: Type of TEA collection update
      enum:
        - product_released
        - vulnerability_disclosed
        - attestation_added
        - document_fixed

    #
    # TEA Artifact and related objects
    #
    artifact:
      type: object
      description: A security-related document
      properties:
        uuid:
          "$ref": "#/components/schemas/uuid"
        name:
          type: string
          description: Artifact name
        author:
          "$ref": "#/components/schemas/artifact-author"
        type:
          "$ref": "#/components/schemas/artifact-type"
        formats:
          type: array
          items:
            "$ref": "#/components/schemas/artifact-format"
    artifact-author:
      type: object
      description: The author of a document.
      properties:
        name:
          type: string
          description: The name of the author
        email:
          type: string
          description: The e-mail address of the author
          format: email
        organization:
          type: string
          description: Organization
    artifact-type:
      type: string
      description: Specifies the type of external reference.
      enum:
        - vcs
        - issue-tracker
        - website
        - advisories
        - bom
        - mailing-list
        - social
        - chat
        - documentation
        - support
        - source-distribution
        - distribution
        - distribution-intake
        - license
        - build-meta
        - build-system
        - release-notes
        - security-contact
        - model-card
        - log
        - configuration
        - evidence
        - formulation
        - attestation
        - threat-model
        - adversary-model
        - risk-assessment
        - vulnerability-assertion
        - exploitability-statement
        - pentest-report
        - static-analysis-report
        - dynamic-analysis-report
        - runtime-analysis-report
        - component-analysis-report
        - maturity-report
        - certification-report
        - codified-infrastructure
        - quality-metrics
        - poam
        - electronic-signature
        - digital-signature
        - rfc-9116
        - other
      meta:enum:
        vcs: Version Control System
        issue-tracker: Issue or defect tracking system, or an Application Lifecycle
          Management (ALM) system
        website: Website
        advisories: Security advisories
        bom: Bill of Materials (SBOM, OBOM, HBOM, SaaSBOM, etc)
        mailing-list: Mailing list or discussion group
        social: Social media account
        chat: Real-time chat platform
        documentation: Documentation, guides, or how-to instructions
        support: Community or commercial support
        source-distribution:
          description: The location where the source code distributable can be obtained.
            This is often an archive format such as zip or tgz. The source-distribution
            type complements use of the version control (vcs) type.
        distribution: Direct or repository download location
        distribution-intake: The location where a component was published to. This
          is often the same as "distribution" but may also include specialized publishing
          processes that act as an intermediary.
        license: The reference to the license file. If a license URL has been defined
          in the license node, it should also be defined as an external reference
          for completeness.
        build-meta: Build-system specific meta file (i.e. pom.xml, package.json, .nuspec,
          etc)
        build-system: Reference to an automated build system
        release-notes: Reference to release notes
        security-contact: Specifies a way to contact the maintainer, supplier, or
          provider in the event of a security incident. Common URIs include links
          to a disclosure procedure, a mailto (RFC-2368) that specifies an email address,
          a tel (RFC-3966) that specifies a phone number, or dns (RFC-4501) that specifies
          the records containing DNS Security TXT.
        model-card: A model card describes the intended uses of a machine learning
          model, potential limitations, biases, ethical considerations, training parameters,
          datasets used to train the model, performance metrics, and other relevant
          data useful for ML transparency.
        log: A record of events that occurred in a computer system or application,
          such as problems, errors, or information on current operations.
        configuration: Parameters or settings that may be used by other components
          or services.
        evidence: Information used to substantiate a claim.
        formulation: Describes how a component or service was manufactured or deployed.
        attestation: Human or machine-readable statements containing facts, evidence,
          or testimony.
        threat-model: An enumeration of identified weaknesses, threats, and countermeasures,
          dataflow diagram (DFD), attack tree, and other supporting documentation
          in human-readable or machine-readable format.
        adversary-model: The defined assumptions, goals, and capabilities of an adversary.
        risk-assessment: Identifies and analyzes the potential of future events that
          may negatively impact individuals, assets, and/or the environment. Risk
          assessments may also include judgments on the tolerability of each risk.
        vulnerability-assertion: A Vulnerability Disclosure Report (VDR) which asserts
          the known and previously unknown vulnerabilities that affect a component,
          service, or product including the analysis and findings describing the impact
          (or lack of impact) that the reported vulnerability has on a component,
          service, or product.
        exploitability-statement: A Vulnerability Exploitability eXchange (VEX) which
          asserts the known vulnerabilities that do not affect a product, product
          family, or organization, and optionally the ones that do. The VEX should
          include the analysis and findings describing the impact (or lack of impact)
          that the reported vulnerability has on the product, product family, or organization.
        pentest-report: Results from an authorized simulated cyberattack on a component
          or service, otherwise known as a penetration test.
        static-analysis-report: SARIF or proprietary machine or human-readable report
          for which static analysis has identified code quality, security, and other
          potential issues with the source code.
        dynamic-analysis-report: Dynamic analysis report that has identified issues
          such as vulnerabilities and misconfigurations.
        runtime-analysis-report: Report generated by analyzing the call stack of a
          running application.
        component-analysis-report: Report generated by Software Composition Analysis
          (SCA), container analysis, or other forms of component analysis.
        maturity-report: Report containing a formal assessment of an organization,
          business unit, or team against a maturity model.
        certification-report: Industry, regulatory, or other certification from an
          accredited (if applicable) certification body.
        codified-infrastructure: Code or configuration that defines and provisions
          virtualized infrastructure, commonly referred to as Infrastructure as Code
          (IaC).
        quality-metrics: Report or system in which quality metrics can be obtained.
        poam: Plans of Action and Milestones (POAM) complement an "attestation" external
          reference. POAM is defined by NIST as a "document that identifies tasks
          needing to be accomplished. It details resources required to accomplish
          the elements of the plan, any milestones in meeting the tasks and scheduled
          completion dates for the milestones".
        electronic-signature: An e-signature is commonly a scanned representation
          of a written signature or a stylized script of the person's name.
        digital-signature: A signature that leverages cryptography, typically public/private
          key pairs, which provides strong authenticity verification.
        rfc-9116: Document that complies with RFC-9116 (A File Format to Aid in Security
          Vulnerability Disclosure)
        other: Use this if no other types accurately describe the purpose of the external
          reference.
    artifact-format:
      type: object
      description: A security-related document in a specific format
      properties:
        uuid:
          "$ref": "#/components/schemas/uuid"
        mimeType:
          type: string
          description: The MIME type of the document
        description:
          type: string
          description: A free text describing the artifact
        url:
          type: string
          description: A download URL for the artifact
          format: url
        signature_url:
          type: string
          description: A download URL for an external signature of the artifact
          format: url
        checksums:
          type: array
          description: List of checksums for the artifact
          items:
            "$ref": "#/components/schemas/artifact-checksum"
    artifact-checksum:
      type: object
      properties:
        algType:
          "$ref": "#/components/schemas/artifact-checksum-type"
        algValue:
          type: string
          description: Checksum value
    artifact-checksum-type:
      type: string
      description: Checksum algorithm
      enum:
        - MD5
        - SHA-1
        - SHA-256
        - SHA-384
        - SHA-512
        - SHA3-256
        - SHA3-384
        - SHA3-512
        - BLAKE2b-256
        - BLAKE2b-384
        - BLAKE2b-512
        - BLAKE3

    #
    # Types used in API responses
    #
    pagination-details:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          example: '2024-03-20T15:30:00Z'
        page_start_index:
          type: number
          format: int64
          default: 0
        page_size:
          type: number
          format: int64
          default: 100
        total_results:
          type: number
          format: int64
      required:
        - timestamp
        - page_start_index
        - page_size
        - total_results
  responses:
    204-common-delete:
      description: Object deleted successfully
      content:
        application/json: {}
    400-invalid-request:
      description: Request was Invalid
      content:
        application/json: {}
    401-unauthorized:
      description: Authentication required
      content:
        application/json: {}
    404-object-by-id-not-found:
      description: Object requested by identifier not found
      content:
        application/json: {}
    paginated-product:
      description: A paginated response containing TEA Products
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/pagination-details"
              - type: object
                properties:
                  results:
                    type: array
                    items:
                      "$ref": "#/components/schemas/product"
  parameters:
    # Pagination
    page-offset:
      name: page-offset
      description: Pagination offset
      in: query
      required: false
      schema:
        type: number
        format: int64
        default: 0
    page-size:
      name: page-size
      description: Pagination offset
      in: query
      required: false
      schema:
        type: number
        format: int64
        default: 100
    # Identifiers
    collection-identifier:
      name: collection-identifier
      description: TEA Collection Identifier
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/uuid"
    leaf-identifier:
      name: leaf-identifier
      description: TEA Leaf Identifier
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/uuid"
    product-identifier-type:
      name: product-identifier-type
      description: The identifier type (enum)
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/identifier-type"
    product-identifier:
      name: product-identifier
      description: The actual identifier string
      in: query
      required: true
      schema:
        type: string
    # @todo - REVIEW AS THIS IS USED AS A UUID in /product/uuid/{uuid} ??
    tei_urn:
      name: tei_urn
      description: Transparency Exchange Identifier (URN)
      in: path
      required: true
      schema:
        type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
    basicAuth:
      type: http
      scheme: basic
security:
  - bearerAuth: []
  - basicAuth: []
tags:
  - name: TEA Collection
  - name: TEA Component
  - name: TEA Product
externalDocs:
  description: Transparency Exchange API specification
  url: https://github.com/CycloneDX/transparency-exchange-api
